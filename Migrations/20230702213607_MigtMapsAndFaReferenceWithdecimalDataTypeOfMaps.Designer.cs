// <auto-generated />
using System;
using IndustrialContoroler.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IndustrialContoroler.Migrations
{
    [DbContext(typeof(IndustrialContorolerDatabaseContext))]
    [Migration("20230702213607_MigtMapsAndFaReferenceWithdecimalDataTypeOfMaps")]
    partial class MigtMapsAndFaReferenceWithdecimalDataTypeOfMaps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IndustrialContoroler.Models.AgentsPoint", b =>
                {
                    b.Property<int>("ApId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ap_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApId"), 1L, 1);

                    b.Property<string>("ApAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ap_Address");

                    b.Property<string>("ApName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ap_Name");

                    b.Property<string>("ApNotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ap_Notes")
                        .HasDefaultValueSql("('لاتوجد ملاحظات')");

                    b.Property<string>("ApPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ap_phoneNumber");

                    b.Property<string>("ApTradeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ap_tradeName");

                    b.Property<string>("ApType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ap_Type");

                    b.Property<int?>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.HasKey("ApId")
                        .HasName("PK__agentsPo__C40F0A854A571820");

                    b.HasIndex("FaId");

                    b.ToTable("agentsPoint");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.AppUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("ActiveUser")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Attachment", b =>
                {
                    b.Property<int>("AtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("at_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AtId"), 1L, 1);

                    b.Property<string>("AtUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("at_Url");

                    b.Property<int>("AttId")
                        .HasColumnType("int")
                        .HasColumnName("att_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<int>("ReId")
                        .HasColumnType("int")
                        .HasColumnName("re_Id");

                    b.HasKey("AtId")
                        .HasName("PK__Attachme__61F955B0B84DF688");

                    b.HasIndex("AttId");

                    b.HasIndex("ReId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.AttachmentType", b =>
                {
                    b.Property<int>("AttId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("att_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttId"), 1L, 1);

                    b.Property<string>("AttAttachmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("att_attachmentName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.HasKey("AttId")
                        .HasName("PK__attachme__4831C98D604648A8");

                    b.ToTable("attachmentType");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Building", b =>
                {
                    b.Property<int>("BuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bu_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuId"), 1L, 1);

                    b.Property<string>("BuArea")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bu_Area");

                    b.Property<string>("BuDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bu_Description");

                    b.Property<int?>("BuHigh")
                        .HasColumnType("int")
                        .HasColumnName("bu_High");

                    b.Property<int?>("BuLength")
                        .HasColumnType("int")
                        .HasColumnName("bu_Length");

                    b.Property<string>("BuLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bu_Location");

                    b.Property<string>("BuNotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bu_Notes")
                        .HasDefaultValueSql("('لاتوجد ملاحظات')");

                    b.Property<string>("BuOwnership")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bu_Ownership");

                    b.Property<string>("BuType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bu_Type");

                    b.Property<int?>("BuWidth")
                        .HasColumnType("int")
                        .HasColumnName("bu_Width");

                    b.Property<int?>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.HasKey("BuId")
                        .HasName("PK__Building__A53BF20F1FDEA98B");

                    b.HasIndex("FaId");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.CastDatum", b =>
                {
                    b.Property<int?>("CdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cd_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CdId"), 1L, 1);

                    b.Property<DateTime?>("CdCardIssuDate")
                        .HasColumnType("date")
                        .HasColumnName("cd_cardIssuDate");

                    b.Property<string>("CdCardPlaceIssu")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cd_cardPlaceIssu");

                    b.Property<string>("CdIdCardNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("cd_idCardNumber");

                    b.Property<string>("CdJob")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cd_Job");

                    b.Property<string>("CdName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cd_Name");

                    b.Property<string>("CdPhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cd_phoneNumber");

                    b.Property<int>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.HasKey("CdId")
                        .HasName("PK__castData__D552B11E20D67763");

                    b.HasIndex("FaId");

                    b.ToTable("castData");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentState")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Facility", b =>
                {
                    b.Property<int>("FaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FaId"), 1L, 1);

                    b.Property<string>("FaActivityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_activityType");

                    b.Property<string>("FaAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_Address");

                    b.Property<string>("FaDirectorate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_Directorate");

                    b.Property<string>("FaEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_Email");

                    b.Property<string>("FaFaxNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_faxNumber");

                    b.Property<string>("FaGovernorate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_Governorate");

                    b.Property<string>("FaLegalEntity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_legalEntity");

                    b.Property<string>("FaMainActivity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_mainActivity");

                    b.Property<string>("FaManagerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_ManagerName");

                    b.Property<string>("FaMobileNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_mobileNumber");

                    b.Property<string>("FaMode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_Mode");

                    b.Property<string>("FaName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_Name");

                    b.Property<int?>("FaNumber")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("fa_Number");

                    b.Property<string>("FaOwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_OwnerName");

                    b.Property<string>("FaOwnership")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_Ownership");

                    b.Property<string>("FaPhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_phoneNumber");

                    b.Property<int>("FaReference")
                        .HasColumnType("int");

                    b.Property<string>("FaRegionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_regionName");

                    b.Property<string>("FaShareCapital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fa_shareCapital");

                    b.Property<string>("FaSize")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_Size");

                    b.Property<DateTime?>("FaStartProduction")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("fa_startProduction");

                    b.Property<string>("FaTotalArea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_totalArea");

                    b.Property<string>("FaWebSite")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_webSite");

                    b.Property<int?>("FaWorkPeriods")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("fa_workPeriods");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReFormNo")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("re_formNo");

                    b.HasKey("FaId")
                        .HasName("PK__Facility__BD0780CCBCC58253");

                    b.HasIndex(new[] { "ReFormNo" }, "UQ__Facility__8E6079845E297BBE")
                        .IsUnique();

                    b.HasIndex(new[] { "FaName" }, "UQ__Facility__E1CFB4A23BE9488F")
                        .IsUnique();

                    b.HasIndex(new[] { "FaNumber" }, "UQ__Facility__F093DB673BE0081A")
                        .IsUnique();

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.HelpMaterial", b =>
                {
                    b.Property<int>("HmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hm_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HmId"), 1L, 1);

                    b.Property<int?>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<string>("HmAmountUsed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("hm_amountUsed");

                    b.Property<string>("HmMeasruingUnit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("hm_measruingUnit");

                    b.Property<string>("HmName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("hm_Name");

                    b.Property<string>("HmNotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hm_Notes")
                        .HasDefaultValueSql("('لاتوجد ملاحظات')");

                    b.Property<int?>("HmPercentInPro")
                        .HasColumnType("int")
                        .HasColumnName("hm_percentInPro");

                    b.Property<string>("HmSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("hm_Source");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.HasKey("HmId")
                        .HasName("PK__helpMate__842BCD5BBE7C0D47");

                    b.HasIndex("FaId");

                    b.ToTable("helpMaterial");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.LogCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("LogCategories");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Machine", b =>
                {
                    b.Property<int>("MaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ma_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaId"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<int?>("MaAbility")
                        .HasColumnType("int")
                        .HasColumnName("ma_Ability");

                    b.Property<string>("MaCountryManufacture")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ma_countryManufacture");

                    b.Property<string>("MaMeasruingUnit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ma_measruingUnit");

                    b.Property<string>("MaName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ma_Name");

                    b.Property<string>("MaNotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ma_Notes")
                        .HasDefaultValueSql("('لاتوجد ملاحظات')");

                    b.Property<int?>("MaNumber")
                        .HasColumnType("int")
                        .HasColumnName("ma_number");

                    b.Property<string>("MaSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ma_Source");

                    b.Property<string>("MaSourceAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ma_sourceAddress");

                    b.Property<string>("MaUses")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ma_Uses");

                    b.HasKey("MaId")
                        .HasName("PK__Machine__0FE6627F9DD47CE6");

                    b.HasIndex("FaId");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Notification", b =>
                {
                    b.Property<int>("NoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("no_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoId"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime>("NoDate")
                        .HasColumnType("date")
                        .HasColumnName("no_date");

                    b.Property<string>("NoMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("no_Message");

                    b.Property<string>("NoSourse")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("no_Sourse");

                    b.Property<TimeSpan>("NoTime")
                        .HasColumnType("time")
                        .HasColumnName("no_time");

                    b.Property<int>("RequestTrafficId")
                        .HasColumnType("int")
                        .HasColumnName("requestTraffic_Id");

                    b.HasKey("NoId")
                        .HasName("PK__Notifica__E2D318E83F3B1F73");

                    b.HasIndex("RequestTrafficId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.ProCapacity", b =>
                {
                    b.Property<int>("PcProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pc_productId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PcProductId"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("PcMeasruingUnit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pc_measruingUnit");

                    b.Property<string>("PcNotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pc_Notes")
                        .HasDefaultValueSql("('لاتوجد ملاحظات')");

                    b.Property<string>("PcProductName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pc_productName");

                    b.Property<string>("PcYearQuantity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("pc_yearQuantity");

                    b.HasKey("PcProductId")
                        .HasName("PK__proCapac__A38A36234161F13B");

                    b.HasIndex("FaId");

                    b.ToTable("proCapacity");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.RelevantDoc", b =>
                {
                    b.Property<int>("RdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rd_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RdId"), 1L, 1);

                    b.Property<int?>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("RdDocName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rd_docName");

                    b.Property<string>("RdStakeholderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rd_stakeholderName");

                    b.Property<string>("ReDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("re_Description");

                    b.Property<string>("ReUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("re_Url");

                    b.HasKey("RdId")
                        .HasName("PK__relevant__D3D102FA6D3F5895");

                    b.HasIndex("FaId");

                    b.ToTable("relevantDoc");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Request", b =>
                {
                    b.Property<int>("ReId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("re_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReId"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("ReApplicant")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("re_Applicant");

                    b.Property<DateTime>("ReDate")
                        .HasColumnType("date")
                        .HasColumnName("re_Date");

                    b.Property<int>("ReFormNo")
                        .HasColumnType("int")
                        .HasColumnName("re_formNo");

                    b.Property<int>("ReReference")
                        .HasColumnType("int")
                        .HasColumnName("re_reference");

                    b.Property<int>("ReRequestState")
                        .HasColumnType("int")
                        .HasColumnName("re_requestState");

                    b.Property<int>("ReSuemNo")
                        .HasColumnType("int")
                        .HasColumnName("re_suemNo");

                    b.Property<string>("ReType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("re_Type");

                    b.HasKey("ReId")
                        .HasName("PK__Request__1A4B5594E26764D9");

                    b.HasIndex(new[] { "ReSuemNo" }, "UQ__Request__44C63773E9ED83A5")
                        .IsUnique();

                    b.HasIndex(new[] { "ReFormNo" }, "UQ__Request__8E607984A59FDB18")
                        .IsUnique();

                    b.ToTable("Request");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.RequestTraffic", b =>
                {
                    b.Property<int>("RtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rt_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RtId"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<int>("ReId")
                        .HasColumnType("int")
                        .HasColumnName("re_Id");

                    b.Property<DateTime>("RtEndDate")
                        .HasColumnType("date")
                        .HasColumnName("rt_endDate");

                    b.Property<DateTime>("RtStartDate")
                        .HasColumnType("date")
                        .HasColumnName("rt_startDate");

                    b.Property<int>("UsId")
                        .HasColumnType("int")
                        .HasColumnName("us_Id");

                    b.HasKey("RtId")
                        .HasName("PK__requestT__EF871B05A6AC9F69");

                    b.HasIndex("ReId");

                    b.ToTable("requestTraffic");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.RowMaterial", b =>
                {
                    b.Property<int>("RmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rm_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RmId"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("RmAmountUsed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rm_amountUsed");

                    b.Property<string>("RmMeasruingUnit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rm_measruingUnit");

                    b.Property<string>("RmName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rm_Name");

                    b.Property<string>("RmNotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rm_Notes")
                        .HasDefaultValueSql("('لاتوجد ملاحظات')");

                    b.Property<int?>("RmPercentInPro")
                        .HasColumnType("int")
                        .HasColumnName("rm_percentInPro");

                    b.Property<string>("RmSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("rm_Source");

                    b.HasKey("RmId")
                        .HasName("PK__rowMater__62C24217C2AA7444");

                    b.HasIndex("FaId");

                    b.ToTable("rowMaterial");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.SafetySecurity", b =>
                {
                    b.Property<int>("SsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ss_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SsId"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("SsEmergencyExit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ss_emergencyExit");

                    b.Property<string>("SsFireSystem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ss_fireSystem");

                    b.Property<string>("SsFirstAidKit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ss_firstAidKit");

                    b.Property<string>("SsLighting")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ss_Lighting");

                    b.Property<string>("SsOccSafety")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ss_occSafety");

                    b.Property<string>("SsSafetyDashboard")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ss_safetyDashboard");

                    b.Property<string>("SsVentilation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ss_Ventilation");

                    b.HasKey("SsId")
                        .HasName("PK__SafetySe__A444DACAACCB338D");

                    b.HasIndex("FaId");

                    b.ToTable("SafetySecurity");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.SecondaryAct", b =>
                {
                    b.Property<int>("SaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sa_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaId"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<int?>("FacilityFaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("SaName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sa_Name");

                    b.HasKey("SaId")
                        .HasName("PK__secondar__FE003E7225435974");

                    b.HasIndex("FaId");

                    b.HasIndex("FacilityFaId");

                    b.ToTable("secondaryAct");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.SiteReason", b =>
                {
                    b.Property<int>("SrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sr_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SrId"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<int?>("FacilityFaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("SrReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sr_Reason");

                    b.HasKey("SrId")
                        .HasName("PK__siteReas__5C9F948102D1C6EC");

                    b.HasIndex("FaId");

                    b.HasIndex("FacilityFaId");

                    b.ToTable("siteReason");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Temporary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cel1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_1");

                    b.Property<string>("Cel10")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_10");

                    b.Property<string>("Cel11")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_11");

                    b.Property<string>("Cel12")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_12");

                    b.Property<string>("Cel13")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_13");

                    b.Property<string>("Cel14")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_14");

                    b.Property<string>("Cel15")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_15");

                    b.Property<string>("Cel16")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_16");

                    b.Property<string>("Cel17")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_17");

                    b.Property<string>("Cel18")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_18");

                    b.Property<string>("Cel19")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_19");

                    b.Property<string>("Cel2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_2");

                    b.Property<string>("Cel20")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_20");

                    b.Property<string>("Cel21")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_21");

                    b.Property<string>("Cel22")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_22");

                    b.Property<string>("Cel23")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_23");

                    b.Property<string>("Cel24")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_24");

                    b.Property<string>("Cel25")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_25");

                    b.Property<string>("Cel26")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_26");

                    b.Property<string>("Cel27")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_27");

                    b.Property<string>("Cel28")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_28");

                    b.Property<string>("Cel29")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_29");

                    b.Property<string>("Cel3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_3");

                    b.Property<string>("Cel30")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_30");

                    b.Property<string>("Cel4")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_4");

                    b.Property<string>("Cel5")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_5");

                    b.Property<string>("Cel6")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_6");

                    b.Property<string>("Cel7")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_7");

                    b.Property<string>("Cel8")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_8");

                    b.Property<string>("Cel9")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Cel_9");

                    b.Property<string>("TblDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Temporary");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Transportation", b =>
                {
                    b.Property<int>("TrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tr_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrId"), 1L, 1);

                    b.Property<int>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("TrLoad")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("tr_Load");

                    b.Property<string>("TrNotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tr_Notes")
                        .HasDefaultValueSql("('لاتوجد ملاحظات')");

                    b.Property<int?>("TrPlateNumber")
                        .HasColumnType("int")
                        .HasColumnName("tr_plateNumber");

                    b.Property<string>("TrType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("tr_Type");

                    b.HasKey("TrId")
                        .HasName("PK__Transpor__ABD6A7503771012A");

                    b.HasIndex("FaId");

                    b.ToTable("Transportation");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.VisitsTraffic", b =>
                {
                    b.Property<int?>("VtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vt_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("VtId"), 1L, 1);

                    b.Property<string>("FaDataState")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fa_dataState");

                    b.Property<int?>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<int?>("ReFormNo")
                        .HasColumnType("int")
                        .HasColumnName("re_formNo");

                    b.Property<DateTime?>("VtVisitDate")
                        .HasColumnType("date")
                        .HasColumnName("vt_visitDate");

                    b.Property<string>("VtVisitPurpose")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("vt_visitPurpose");

                    b.HasKey("VtId")
                        .HasName("PK__visitsTr__9458D67B52050576");

                    b.HasIndex("FaId");

                    b.ToTable("visitsTraffic");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.VwUser", b =>
                {
                    b.Property<bool>("ActiveUser")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("VwUsers");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Worker", b =>
                {
                    b.Property<int>("WoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("wo_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoId"), 1L, 1);

                    b.Property<int?>("FaId")
                        .HasColumnType("int")
                        .HasColumnName("fa_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("WoEduQualifying")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("wo_eduQualifying");

                    b.Property<int?>("WoFemaleNumber")
                        .HasColumnType("int")
                        .HasColumnName("wo_femaleNumber");

                    b.Property<int?>("WoMaleNumber")
                        .HasColumnType("int")
                        .HasColumnName("wo_maleNumber");

                    b.Property<string>("WoNationality")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("wo_Nationality");

                    b.Property<string>("WoNotes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("wo_Notes")
                        .HasDefaultValueSql("('لاتوجد ملاحظات')");

                    b.Property<string>("WoSpecialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("wo_specialization");

                    b.Property<int?>("WoTotal")
                        .HasColumnType("int")
                        .HasColumnName("wo_Total");

                    b.Property<string>("WoType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("wo_Type");

                    b.HasKey("WoId")
                        .HasName("PK__Worker__DD93F5F884D36C53");

                    b.HasIndex("FaId");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IndustrialContoroler.Models.AgentsPoint", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("AgentsPoints")
                        .HasForeignKey("FaId")
                        .HasConstraintName("FK_FacilityAgentsPoints");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Attachment", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.AttachmentType", "Att")
                        .WithMany("Attachments")
                        .HasForeignKey("AttId")
                        .IsRequired()
                        .HasConstraintName("FK_AttachmentTypeAttachments");

                    b.HasOne("IndustrialContoroler.Models.Request", "Re")
                        .WithMany("Attachments")
                        .HasForeignKey("ReId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestsAttachments");

                    b.Navigation("Att");

                    b.Navigation("Re");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Building", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("Buildings")
                        .HasForeignKey("FaId")
                        .HasConstraintName("FK_FacilityBuildings");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.CastDatum", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("CastData")
                        .HasForeignKey("FaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacilityCastData");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Facility", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Request", "ReFormNoNavigation")
                        .WithOne("Facility")
                        .HasForeignKey("IndustrialContoroler.Models.Facility", "ReFormNo")
                        .HasPrincipalKey("IndustrialContoroler.Models.Request", "ReFormNo")
                        .IsRequired()
                        .HasConstraintName("FK_FacilityRequests");

                    b.Navigation("ReFormNoNavigation");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.HelpMaterial", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("HelpMaterials")
                        .HasForeignKey("FaId")
                        .HasConstraintName("FK_FacilityHelpMaterials");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.LogCategory", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Machine", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("Machines")
                        .HasForeignKey("FaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacilityMachines");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Notification", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.RequestTraffic", "RequestTraffic")
                        .WithMany("Notifications")
                        .HasForeignKey("RequestTrafficId")
                        .IsRequired()
                        .HasConstraintName("FK_requestTrafficNotifications");

                    b.Navigation("RequestTraffic");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.ProCapacity", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("ProCapacities")
                        .HasForeignKey("FaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacilityProductionCapacity");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.RelevantDoc", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("RelevantDocs")
                        .HasForeignKey("FaId")
                        .HasConstraintName("FK_FacilityRelevantDocuments");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.RequestTraffic", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Request", "Re")
                        .WithMany("RequestTraffics")
                        .HasForeignKey("ReId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestsRequestTraffic");

                    b.Navigation("Re");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.RowMaterial", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("RowMaterials")
                        .HasForeignKey("FaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacilityRowMaterials");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.SafetySecurity", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("SafetySecurities")
                        .HasForeignKey("FaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacilitySafetySecurity");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.SecondaryAct", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("SecondaryActs")
                        .HasForeignKey("FaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacilitySecondaryAct");

                    b.HasOne("IndustrialContoroler.Models.Facility", null)
                        .WithMany("secondaryActs")
                        .HasForeignKey("FacilityFaId");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.SiteReason", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("SiteReasons")
                        .HasForeignKey("FaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacilitySiteReasons");

                    b.HasOne("IndustrialContoroler.Models.Facility", null)
                        .WithMany("Reasons")
                        .HasForeignKey("FacilityFaId");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Transportation", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("Transportations")
                        .HasForeignKey("FaId")
                        .IsRequired()
                        .HasConstraintName("FK_FacilityTransportation");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.VisitsTraffic", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("VisitsTraffics")
                        .HasForeignKey("FaId")
                        .HasConstraintName("FK_FacilityVisitsTraffic");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Worker", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.Facility", "Fa")
                        .WithMany("Workers")
                        .HasForeignKey("FaId")
                        .HasConstraintName("FK_FacilityWorkers");

                    b.Navigation("Fa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndustrialContoroler.Models.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IndustrialContoroler.Models.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IndustrialContoroler.Models.AttachmentType", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Facility", b =>
                {
                    b.Navigation("AgentsPoints");

                    b.Navigation("Buildings");

                    b.Navigation("CastData");

                    b.Navigation("HelpMaterials");

                    b.Navigation("Machines");

                    b.Navigation("ProCapacities");

                    b.Navigation("Reasons");

                    b.Navigation("RelevantDocs");

                    b.Navigation("RowMaterials");

                    b.Navigation("SafetySecurities");

                    b.Navigation("SecondaryActs");

                    b.Navigation("SiteReasons");

                    b.Navigation("Transportations");

                    b.Navigation("VisitsTraffics");

                    b.Navigation("Workers");

                    b.Navigation("secondaryActs");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.Request", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Facility");

                    b.Navigation("RequestTraffics");
                });

            modelBuilder.Entity("IndustrialContoroler.Models.RequestTraffic", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
